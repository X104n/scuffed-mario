stages:
  - build     # compile everything
  - test      # run tests
  - package   # build jars
  #- deploy    # (unused) deploy jars


variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true -Dmaven.compiler.staleMillis=3600000 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"

include:
  - template: Security/Secret-Detection.gitlab-ci.yml
# The code quality job needs extra support from the runner, so it's disabled
#  - template: Code-Quality.gitlab-ci.yml

#code_quality:
#  tags: ["quality"]

workflow:
  rules:
    # run a merge request pipeline if that makes sense
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - src/**/*
        - pom.xml    # don't run a branch pipeline on commits if we'll run a merge request pipeline
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    # do run a branch pipeline for other commits
    - if: '$CI_COMMIT_BRANCH'
      changes:
        - src/**/*
        - pom.xml    # don't run a branch pipeline on commits if we'll run a merge request pipeline


# Use Maven 3.8.4 on OpenJDK 17 with 'slim' Ubuntu 
image: maven:3.8.4-openjdk-17-slim

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository
  key: "$CI_JOB_NAME"

# run mvn compile to build the project
build:
  stage: build
  script:
    - 'mvn $MAVEN_CLI_OPTS compile'
  artifacts:
    paths:
      - target/

# run mvn verify to compile and test the project
verify:
  stage: test
  script:
    - find src target -ls
    - 'mvn $MAVEN_CLI_OPTS verify'
    - '[ -f target/site/jacoco/index.html ] && sed -E -e "s;^.*Total[^%]*>([0-9]+%)<.*$;Total Coverage: \\1\\n;g" target/site/jacoco/index.html'
  artifacts:
    reports:
      junit: target/surefire-reports/TEST-*.xml
    paths:
      - target/
  coverage: '/Total.*?([0-9]{1,3})%/'
  dependencies:
    - build

# run mvn package to build jar files
package:
  stage: package
  script:
    - 'mvn $MAVEN_CLI_OPTS package'
  artifacts:
    paths:
      - target/*.jar
  dependencies:
    - verify

# To deploy packages from CI, create a ci_settings.xml file
# For deploying packages to GitLab's Maven Repository: See https://docs.gitlab.com/ee/user/packages/maven_repository/index.html#create-maven-packages-with-gitlab-cicd for more details.
# For `master` branch run `mvn deploy` automatically.
#deploy:
#  stage: deploy
#  script:
#    - if [ ! -f ci_settings.xml ];
#        then echo "CI settings missing\! If deploying to GitLab Maven Repository, please see https://docs.gitlab.com/ee/user/packages/maven_repository/index.html#create-maven-packages-with-gitlab-cicd for instructions.";
#      else
#         mvn $MAVEN_CLI_OPTS deploy -s ci_settings.xml
#      fi
#  rules:
#    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#      exists:
#        - ci_settings.xml
#  dependencies:
#    - package

check updates:
  stage: test
  script:
    - mvn versions:display-plugin-updates versions:display-property-updates versions:display-dependency-updates -D allowMajorUpdates=false

sonarqube-check:
  image: maven:3.6.3-jdk-11
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    SONAR_TOKEN: "ac054590684544bc347d3ba9155889019fce034b"
    SONAR_HOST_URL: "http://localhost:9000"
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
  allow_failure: true
  only:
    - merge_requests
    - master # or the name of your main branch